EMERALD'S KILLFEED — FULL COMMAND EXECUTION TRACE & DATABASE CACHE PURGE

🧩 TASK TYPE: SINGLE, NON-INTERRUPTIBLE DEBUG TASK

All instructions must be executed in one batch — no checkpointing, no output, no commit, until all command logic has been validated end-to-end in runtime.


---

[PHASE 1] — SYSTEM-WIDE COMMAND DIAGNOSIS & TRACE

🔥 Primary Symptom:

All slash commands are timing out or hanging despite proper deferrals. No data is returned. This appears to originate deep in the database interaction, cache mismanagement, or blocking logic.


---

🔬 OBJECTIVES:

1. Trace Every Slash Command End-to-End

Open every cog and command handler

Confirm structure begins with:
@discord.slash_command(...) or @bot.slash_command(...)

Follow execution into:

Any stats_handler, db_manager, cache_layer, utils, or parsers


Trace until the final response (ctx.followup.send(...))


> ❗You must verify that a reply is guaranteed and non-blocking.




2. Deep Database Cache Audit

Trace any cache system (cache_manager, cache_client, etc.)

Determine if any cached documents are stale, locked, or failing to refresh

Check for silent fails where cache reads return None and are never validated

Disable or bypass cache temporarily for testing — compare performance and output



3. Live Mongo Query Verification

Confirm all Mongo calls inside:

/stats

/leaderboard

/bounty

/link, /unlink

Parser-to-DB storage


Ensure all aggregation pipelines or find(...) / update(...) calls:

Match current schema

Respect isolation (guild_id, _id)

Are awaited correctly

Do not block coroutine chains




4. Command Structure Consistency

Ensure no discord.py remnants remain

Confirm all commands use Pycord 2.6.1-compliant:

Slash decorators

Context responders

Error handlers


Remove all legacy constructs (ctx.send(), commands.Context, etc.)



5. Log Correlation + Error Tracebacks

Parse and examine all log outputs:

Log parser

Database manager

Slash command execution


Match timestamps to see where command chains break

Find stack traces showing timeout, broken await chains, or missing send()



6. Timing Logic Verification

If any command takes >2.5 seconds to gather data, it must:

Defer immediately

Move processing to a background task

Always follow with a response


You must verify this using timestamps and print logs or debuggers





---

✅ COMPLETION CRITERIA

[ ] Every slash command completes with a valid response in runtime

[ ] No command exceeds Discord’s 3s timeout window without deferral + background handling

[ ] All cache calls either succeed or are bypassed safely with fallback reads

[ ] Every Mongo call is schema-valid and returns correct filtered results

[ ] All slash commands now properly fetch, format, and return data with EmbedFactory

[ ] Logs confirm all command chains are fully traversed with zero drop-offs

[ ] No database-level race conditions, stale cache use, or threading locks remain



---

🔒 EXECUTION RULES

🔂 This is a single-task batch repair. Do not output mid-task.

✅ Pycord 2.6.1 only — no discord.py syntax, no hybrid code.

🚫 No commits, logs, or assumptions until the entire system is verified working

📊 Validation includes visible response, embed output, and live command interaction

🧠 All fixes must preserve isolation (guild & server) and EmbedFactory design